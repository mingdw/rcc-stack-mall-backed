// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"github.com/spf13/viper"
	"rcc-stake-mall-backed/internal/handler"
	"rcc-stake-mall-backed/internal/job"
	"rcc-stake-mall-backed/internal/repository"
	"rcc-stake-mall-backed/internal/server"
	"rcc-stake-mall-backed/internal/service"
	"rcc-stake-mall-backed/pkg/app"
	"rcc-stake-mall-backed/pkg/jwt"
	"rcc-stake-mall-backed/pkg/log"
	"rcc-stake-mall-backed/pkg/server/http"
	"rcc-stake-mall-backed/pkg/sid"
	"github.com/ethereum/go-ethereum/ethclient"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper, logger *log.Logger) (*app.App, func(), error) {
	jwtJWT := jwt.NewJwt(viperViper)
	handlerHandler := handler.NewHandler(logger)
	db := repository.NewDB(viperViper, logger)
	repositoryRepository := repository.NewRepository(logger, db)
	transaction := repository.NewTransaction(repositoryRepository)
	sidSid := sid.NewSid()
	serviceService := service.NewService(transaction, logger, sidSid, jwtJWT)
	userRepository := repository.NewUserRepository(repositoryRepository)
	userService := service.NewUserService(serviceService, userRepository)
	userHandler := handler.NewUserHandler(handlerHandler, userService)
	categoryRepository := repository.NewCategoryRepository(repositoryRepository)
	categoryAttrGroupRepository := repository.NewCategoryAttrGroupRepository(repositoryRepository)
	attrRepository := repository.NewAttrRepository(repositoryRepository)
	attrGroupRepository := repository.NewAttrGroupRepository(repositoryRepository)
	categoryService := service.NewCategoryService(serviceService, categoryRepository, categoryAttrGroupRepository, attrRepository, attrGroupRepository)
	categoryHandler := handler.NewCategoryHandler(handlerHandler, categoryService)
	productSpuRepository := repository.NewProductSpuRepository(repositoryRepository)	
	productSpuDetailRepository := repository.NewProductSpuDetailRepository(repositoryRepository)
	productSkuRepository := repository.NewProductSkuRepository(repositoryRepository)
	productSpuAttrParamsRepository := repository.NewProductSpuAttrParamsRepository(repositoryRepository)
	userAddressRepository := repository.NewUserAddressRepository(repositoryRepository)
	userAddressService := service.NewUserAddressService(serviceService, userAddressRepository)
	userAddressHandler := handler.NewUserAddressHandler(handlerHandler, userAddressService)
	addressRepository := repository.NewAddressRepository(repositoryRepository)
	addressService := service.NewAddressService(serviceService, addressRepository)
	addressHandler := handler.NewAddressHandler(handlerHandler, addressService)
	productRepository := repository.NewProductRepository(
		repositoryRepository,
		productSpuRepository,
		productSpuDetailRepository,
		productSpuAttrParamsRepository,
		productSkuRepository,
		addressRepository,
	)
	productService := service.NewProductService(serviceService, productRepository, categoryRepository)
	productHandler := handler.NewProductHandler(handlerHandler, productService)

	rccTokenAddress := viperViper.GetString("rccTokenAddress")
	rccStakeAddress := viperViper.GetString("rccStakeAddress")

	// 首先确保有 ethclient 实例
	client, err := ethclient.Dial(viperViper.GetString("ethclient.rpc_url"))
	if err != nil {
		return nil, nil, err
	}

	contractService, err := service.NewContractService(
		serviceService,  // 传入 service 实例
		client,         // 传入 ethclient 实例
		rccTokenAddress,
		rccStakeAddress,	
	)
	if err != nil {
		return nil, nil, err
	}

	contractHandler := handler.NewContractHandler(handlerHandler, contractService)
	httpServer := server.NewHTTPServer(logger, viperViper, jwtJWT, userHandler, categoryHandler, productHandler, addressHandler, userAddressHandler, contractHandler)
	jobJob := job.NewJob(transaction, logger, sidSid)
	userJob := job.NewUserJob(jobJob, userRepository)
	jobServer := server.NewJobServer(logger, userJob)
	appApp := newApp(httpServer, jobServer)
	return appApp, func() {
	}, nil
}

// wire.go:

var repositorySet = wire.NewSet(repository.NewDB, repository.NewRepository, repository.NewTransaction, repository.NewUserRepository)

var serviceSet = wire.NewSet(service.NewService, service.NewUserService)

var handlerSet = wire.NewSet(handler.NewHandler, handler.NewUserHandler)

var jobSet = wire.NewSet(job.NewJob, job.NewUserJob)

var serverSet = wire.NewSet(server.NewHTTPServer, server.NewJobServer)

// build App
func newApp(
	httpServer *http.Server,
	jobServer *server.JobServer,

) *app.App {
	return app.NewApp(app.WithServer(httpServer, jobServer), app.WithName("demo-server"))
}
